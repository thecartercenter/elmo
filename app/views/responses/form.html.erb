<%# load the mapping API %>
<% content_for(:per_page_js){ javascript_google_maps } %>

<%# title includes ID if defined %>
<% @title_args = {:id => @response.id} %>

<%= render("layouts/location_picker") %>

<%# This needs to be up here so it runs before the MediaUploaderViews are initialized. %>
<%= javascript_doc_ready do %>
  ELMO.media_uploader_manager = new ELMO.Views.MediaUploaderManager(<%=json(
    el: ".response_form",
    preview_template: render("responses/answers/dropzone_preview")
  )%>);
<% end %>

<% @response.answers.collect{|a| a.errors.full_messages.join(", ")}.join(" ") %>

<%= elmo_form_for(@response, read_only: @read_only) do |f| %>

  <%= top_action_links(@response, :except => :new) %>

  <%= f.base_errors %>

  <%= f.field(:form_id, :type => :hidden) %>

  <%# form name %>
  <%= f.field(:form_id, :content => link_to(@response.form.name, @response.form)) %>

  <%# if the user can't manage the response, then don't show the submitter box as a dropdown %>
  <%= f.field(:user_id, :type => :select, :required => true, :options => sel_opts_from_objs(@response.user),
    :read_only => cannot?(:manage, @response),

    # some users are not linkable currently if they're not assigned to the mission
    # if we give nil read_only_content then it will revert to the default read only content
    :read_only_content => can?(:read, @response.user) ? link_to(@response.user.try(:name), @response.user) : nil) %>

  <%# don't show source or reviewed if new obj %>
  <% unless form_mode == :new %>

    <%= f.field(:source) if read_only %>

    <%# only show the reviewed checkbox as editable if the user can review the response %>
    <%= f.field(:reviewed, :type => :check_box, :read_only => cannot?(:review, @response)) %>

    <%# only show the reviewer notes to reviewers %>
    <%= f.field(:reviewer_notes,
      type: :textarea,
      read_only: cannot?(:review, @response),
      read_only_content: simple_format(@response.reviewer_notes)) if can?(:review, @response) %>

  <% end %>

  <%= render("responses/answers/nodes", nodes: @nodes, inst_num: 1, read_only: f.read_only?) %>

  <%# Incomplete checkbox %>
  <%= f.field(:incomplete, :type => :check_box) if can?(:submit_incomplete, @response) %>

  <div class="submit-buttons">
    <%= f.submit(:class => "btn btn-primary") %>
    <% if form_mode == :edit && can?(:review, @response) %>
      <%= f.submit(t('response.save_and_mark_reviewed'), :class => "btn btn-primary", :name => 'commit_and_mark_reviewed', read_only: false) %>
    <% end %>
    <div id="upload-progress-notice" class="btn btn-default" disabled="disabled">
      <%= image_tag("load-ind-small.gif") %>
      <%= t("response.upload_progress_notice") %>
    </div>
  </div>

<% end %>

<%= javascript_doc_ready do %>
  ELMO.Response.init(<%=json({
    url: @response.new_record? ? possible_submitters_new_response_path : possible_submitters_response_path(@response)
  })%>);
<% end %>
