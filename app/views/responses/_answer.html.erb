<div class="form_field qtype_<%= answer.qtype.name %> <%= form_mode == :show ? 'read_only' : '' %>"
  data-qtype-name="<%= answer.qtype.name %>" id="qing_<%= answer.questioning_id %>">

  <label class="main"><%= reqd_sym if answer.required? %> <%= answer.question_name || "[#{t('answer.no_name')}]" %>
  </label><div class="control">

    <%# don't show errors because we do it manually below %>
    <%= elmo_fields_for('response[all_answers][]', answer, :show_errors => false) do |f| %>

      <% if form_mode == :show %>

        <%# render the answer value based on question type. we include machine readable value in
            data-val so that conditions can still be eval'd in JS %>
        <% case type = answer.qtype.name
           when 'select_one' %>

          <%= content_tag(:div, answer.option.try(:name), :class => 'ro-val', :'data-val' => answer.option_id) %>

        <% when 'select_multiple' %>

          <%= content_tag(:div, answer.choices.map{|c| c.option.name}.join('<br/>').html_safe, :class => 'ro-val', :'data-val' => answer.choices.map(&:option_id).to_json) %>

        <% when 'datetime', 'date', 'time' %>

          <% format = type == "time" ? :time_only : :default %>
          <% val = answer.send("#{type}_value") %>

          <%# output time value in human readable and machine readable formats %>
          <%= content_tag(:div, val.nil? ? '' : l(val, :format => format), :class => 'ro-val', :'data-val' => val.nil? ? '' : val.to_s(:"std_#{type}")) %>

        <% when 'integer', 'decimal' %>

          <%= content_tag(:div, answer.value, :class => 'ro-val', :'data-val' => answer.value) %>

        <% when 'text', 'long_text', 'tiny_text' %>

          <%# show search excerpt (highlights search terms) if exists for this questioning, else just show plain answer value %>
          <%# no need to output data-val here since same as human readable %>
          <%= content_tag(:div, excerpt_if_exists(@response, answer)) %>

        <% else %>

          <%# no need to output data-val here since same as human readable %>
          <%= content_tag(:div, answer.value) %>

        <% end # case %>

      <%# not show mode %>
      <% else %>

        <%= f.hidden_field(:response_id, :index => answer_counter) %>
        <%= f.hidden_field(:questioning_id, :index => answer_counter) %>
        <%= f.hidden_field(:relevant, :class => "relevant", :index => answer_counter) %>

        <%# show the error messages without keys %>
        <%= content_tag(:div, answer.errors.to_hash.values.join(', '), :class => 'form-errors') unless answer.errors.empty? %>

        <% case type = answer.qtype.name
           when "select_one" %>

          <%= f.select(:option_id, answer.question.select_options, {:include_blank => true}, :index => answer_counter, :class => "form-control") %>

        <% when "select_multiple" %>

          <%# render a checkbox for each possible choice %>
          <div class="widget">
            <%= render(:partial => "choice", :locals => {:answer_counter => answer_counter}, :collection => answer.all_choices, :class => "form-control") %>
          </div>

        <% when "datetime", "date", "time" %>

          <%= f.send("#{type}_select", :"#{type}_value", :include_blank => true, :index => answer_counter, :class => "form-control") %>

        <% else %>

          <%# textarea or input, depending on type %>
          <%= f.send(type == 'long_text' ? 'text_area' : 'text_field', :value, :class => "qtype_#{type} form-control", :index => answer_counter) %>

          <% if type == 'location' %>
            &nbsp;<%= action_link("edit", "#", :class => "edit_location_link") if form_mode != :show %>
          <% end %>

        <% end # case %>

      <% end # if show mode %>

    <% end # elmo_fields_for %>

  </div>

  <div class="hint">
    <% if form_mode && answer.question_hint.present? %>
      <a href="#" rel="popover" class="hint" data-content="<%= answer.question_hint %>"><i class="hint fa fa-2x fa-info-circle"></i></a>
    <% end %>
  </div>

</div>



<%# setup condition js object if a condition exists %>
<%# note that we need to do this in any form mode, even show %>
<% if answer.condition %>
  <%= javascript_doc_ready do %>
    ELMO.Response.conditions.push(new ELMO.Condition(<%=j answer.condition.to_json.html_safe %>));
  <% end %>
<% end %>
