<div class="option_set_form">

  <%# need to print this here if in ajax mode %>
  <%= render("layouts/flash", :flash => flash) if request.xhr? %>

  <%= top_action_links(@option_set) %>

  <% if form_mode == :edit %>
    <%= published_warning(@option_set) if @option_set.published? %>
    <%= appears_elsewhere_warning(@option_set) if @option_set.has_questions? %>
    <%= multi_level_forbidden_notice if @option_set.has_select_multiple_questions? %>
    <%= huge_notice if @option_set.huge? %>
  <% end %>

  <%= elmo_form_for(@option_set) do |f| %>
    <%= f.field(:name, :required => true, :read_only => cannot?(:update_core, @option_set)) %>
    <%= f.field(:geographic, :type => :check_box, :read_only => cannot?(:change_geographic, @option_set)) %>
    <%= f.field(:multi_level, :type => :check_box,
      :read_only => cannot?(:update_core, @option_set) || @option_set.has_select_multiple_questions? || @option_set.huge?) %>
    <%= f.field(:option_levels, :partial => "option_levels") %>
    <%= f.field(:options, :required => true, :partial => "options") %>
    <div class="submit-buttons">
      <%= loading_indicator %>&nbsp;
      <%= f.submit(:class => "btn btn-primary") unless params[:modal_mode] %>
    </div>
  <% end %>
</div>

<%= javascript_doc_ready do %>
  new ELMO.Views.OptionSetForm(<%=json(
    option_set: @option_set.as_json(:for_option_set_form => true),

    edit_link: action_link(:edit, '#'),
    remove_link: action_link(:remove, '#'),
    suggest_path: suggest_options_path,

    # Options and option levels are not editable if Option Set is huge.
    options_levels_read_only: read_only || @option_set.huge?,

    # Whether the form is being loaded in a modal.
    modal_mode: params[:modal_mode].present?,

    can_reorder: can?(:reorder_options, @option_set),
    can_remove_options: can?(:remove_options, @option_set),
    max_option_name_length: Option::MAX_NAME_LENGTH
  )%>);
<% end %>
